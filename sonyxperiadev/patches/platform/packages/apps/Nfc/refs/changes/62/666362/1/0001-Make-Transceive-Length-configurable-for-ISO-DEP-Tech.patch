From d2097407748f9323e3d0c6d1c62e737cf15f28cf Mon Sep 17 00:00:00 2001
From: Ruchi Kandoi <kandoiruchi@google.com>
Date: Thu, 9 Nov 2017 13:45:18 -0800
Subject: [PATCH] Make Transceive Length configurable for ISO DEP Technology

ISO_DEP_MAX_TRANSCEIVE has been added to indicate the maximum APDU
length that is supported by the underlying NFC chip. If the
configuration is not set, default maximum of 261 is set.

Check if device supports Extended APDUs, if yes, return true for
getExtendedLengthApdusSupported()

Test: Read IsoDep Tag and check the maxTransceive length.
Bug: 37005118
Change-Id: I198c06fdcbcd3b45932f544fa063e920f84f7968
---
 nci/jni/NativeNfcManager.cpp                       | 27 +++++++++++++++++++++-
 .../com/android/nfc/dhimpl/NativeNfcManager.java   | 18 ++++++++-------
 2 files changed, 36 insertions(+), 9 deletions(-)

diff --git a/nci/jni/NativeNfcManager.cpp b/nci/jni/NativeNfcManager.cpp
index 0f16572e..64ed5487 100755
--- a/nci/jni/NativeNfcManager.cpp
+++ b/nci/jni/NativeNfcManager.cpp
@@ -1819,6 +1819,28 @@ static void nfcManager_doDisableScreenOffSuspend(JNIEnv* e, jobject o)
     PowerSwitch::getInstance().setScreenOffPowerState(PowerSwitch::POWER_STATE_OFF);
 }
 
+/*******************************************************************************
+**
+** Function:        nfcManager_getIsoDepMaxTransceiveLength
+**
+** Description:     Get maximum ISO DEP Transceive Length supported by the NFC
+**                  chip. Returns default 261 bytes if the property is not set.
+**
+** Returns:         max value.
+**
+*******************************************************************************/
+static jint nfcManager_getIsoDepMaxTransceiveLength(JNIEnv*, jobject) {
+  unsigned long maxLength;
+  /* Check if extended APDU is supported by the chip.
+   * If not, default value is returned.
+   * The maximum length of a default IsoDep frame consists of:
+   * CLA, INS, P1, P2, LC, LE + 255 payload bytes = 261 bytes
+   */
+  if (!GetNumValue(NAME_ISO_DEP_MAX_TRANSCEIVE, &maxLength, sizeof(maxLength)))
+    maxLength = 261;
+  return maxLength;
+}
+
 /*****************************************************************************
 **
 ** JNI functions for android-4.0.1_r1
@@ -1918,7 +1940,10 @@ static JNINativeMethod gMethods[] =
     {"doEnableDtaMode", "()V",
             (void*) nfcManager_doEnableDtaMode},
     {"doDisableDtaMode", "()V",
-            (void*) nfcManager_doDisableDtaMode}
+            (void*) nfcManager_doDisableDtaMode},
+
+    {"getIsoDepMaxTransceiveLength", "()I",
+            (void*)nfcManager_getIsoDepMaxTransceiveLength}
 
 };
 
diff --git a/nci/src/com/android/nfc/dhimpl/NativeNfcManager.java b/nci/src/com/android/nfc/dhimpl/NativeNfcManager.java
index 488801ff..53541939 100755
--- a/nci/src/com/android/nfc/dhimpl/NativeNfcManager.java
+++ b/nci/src/com/android/nfc/dhimpl/NativeNfcManager.java
@@ -50,6 +50,7 @@ public class NativeNfcManager implements DeviceHost {
     /* Native structure */
     private long mNative;
 
+    private int mIsoDepMaxTransceiveLength;
     private final DeviceHostListener mListener;
     private final Context mContext;
 
@@ -75,9 +76,13 @@ public class NativeNfcManager implements DeviceHost {
 
     private native boolean doInitialize();
 
+    private native int getIsoDepMaxTransceiveLength();
+
     @Override
     public boolean initialize() {
-        return doInitialize();
+        boolean ret = doInitialize();
+        mIsoDepMaxTransceiveLength = getIsoDepMaxTransceiveLength();
+        return ret;
     }
 
     private native void doEnableDtaMode();
@@ -303,12 +308,7 @@ public class NativeNfcManager implements DeviceHost {
             case (TagTechnology.NFC_V):
                 return 253; // PN544 RF buffer = 255 bytes, subtract two for CRC
             case (TagTechnology.ISO_DEP):
-                /* The maximum length of a normal IsoDep frame consists of:
-                 * CLA, INS, P1, P2, LC, LE + 255 payload bytes = 261 bytes
-                 * such a frame is supported. Extended length frames however
-                 * are not supported.
-                 */
-                return 261; // Will be automatically split in two frames on the RF layer
+                return mIsoDepMaxTransceiveLength;
             case (TagTechnology.NFC_F):
                 return 252; // PN544 RF buffer = 255 bytes, subtract one for SoD, two for CRC
             default:
@@ -331,7 +331,9 @@ public class NativeNfcManager implements DeviceHost {
 
     @Override
     public boolean getExtendedLengthApdusSupported() {
-        // TODO check BCM support
+        /* 261 is the default size if extended length frames aren't supported */
+        if (getMaxTransceiveLength(TagTechnology.ISO_DEP) > 261)
+            return true;
         return false;
     }
 
-- 
2.13.0

