From 6272c6244d2b007eb6ad08fb682d77612555d1ac Mon Sep 17 00:00:00 2001
From: Park Ju Hyung <qkrwngud825@gmail.com>
Date: Sun, 15 Jan 2017 03:33:04 +0900
Subject: [PATCH] SystemUI: Implement burn-in protection for status-bar/nav-bar
 items

Devices with OLED display suffer from
status-bar's notification items and nagivation bar's software keys
causing permanent burn-ins when used long-term.

Moving all items in the area
both horizontally and vertically workarounds this problem.

This new feature can be enabled by setting
config_statusBarBurnInProtection to true.

The shifting interval can be configured with config_shift_interval.
The default shifting interval is 60 seconds.

Test: System boots, elements are shifting around as per configuration.

Signed-off-by: Park Ju Hyung <qkrwngud825@gmail.com>
Signed-off-by: Alex Naidis <alex.naidis@linux.com>
Signed-off-by: Thecrazyskull <anaskarbila@gmail.com>
Signed-off-by: Angelo G. Del Regno <kholk11@gmail.com>
---
 packages/SystemUI/res/values/config.xml            |   9 ++
 packages/SystemUI/res/values/dimens.xml            |   8 ++
 .../statusbar/phone/NavigationBarView.java         |  26 +++++
 .../statusbar/phone/PhoneStatusBarView.java        |  27 +++++
 .../systemui/statusbar/phone/StatusBar.java        |  11 ++
 .../policy/BurnInProtectionController.java         | 121 +++++++++++++++++++++
 6 files changed, 202 insertions(+)
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/policy/BurnInProtectionController.java

diff --git a/packages/SystemUI/res/values/config.xml b/packages/SystemUI/res/values/config.xml
index f5397b5c84a..b310e4d0adc 100644
--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -104,6 +104,15 @@
          prevent wasting cpu cycles on the dimming animation -->
     <bool name="config_navigation_bar_enable_auto_dim_no_visible_wallpaper">true</bool>
 
+    <!-- Whether to enable shifting of elements in the status bar and the navigation bar.
+         Should be enabled for OLED devices to reduce/prevent burn in on the status bar
+         and on the navigation bar and disabled for all other devices. -->
+    <bool name="config_statusBarBurnInProtection">false</bool>
+
+    <!-- Amount of time in seconds to wait before shifting elements around when the burn-in
+         protection is enabled for status bar and navigation bar -->
+    <integer name="config_shift_interval">60</integer>
+
     <!-- Whether QuickSettings is in a phone landscape -->
     <bool name="quick_settings_wide">false</bool>
 
diff --git a/packages/SystemUI/res/values/dimens.xml b/packages/SystemUI/res/values/dimens.xml
index be80d52f2a5..136d33eed83 100644
--- a/packages/SystemUI/res/values/dimens.xml
+++ b/packages/SystemUI/res/values/dimens.xml
@@ -938,6 +938,14 @@
          to prevent burn-in on AOD. -->
     <dimen name="charging_indication_burn_in_prevention_offset_y">5dp</dimen>
 
+    <!-- The maximum offset in either direction that elements are moved vertically to prevent
+         burn-in on status bar and navigation bar. -->
+    <dimen name="vertical_max_shift">1.0dp</dimen>
+
+    <!-- The maximum offset in either direction that elements are moved horizontally to prevent
+         burn-in on status bar and navigation bar. -->
+    <dimen name="horizontal_max_shift">3.0dp</dimen>
+
     <dimen name="corner_size">8dp</dimen>
     <dimen name="top_padding">0dp</dimen>
     <dimen name="bottom_padding">48dp</dimen>
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
index d2ffdbf11e2..3f0d32db778 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
@@ -162,6 +162,13 @@ public class NavigationBarView extends FrameLayout implements PluginListener<Nav
 
     private int mRotateBtnStyle = R.style.RotateButtonCCWStart90;
 
+    private int mBasePaddingBottom;
+    private int mBasePaddingLeft;
+    private int mBasePaddingRight;
+    private int mBasePaddingTop;
+
+    private ViewGroup mNavigationBarContents;
+
     private class NavTransitionListener implements TransitionListener {
         private boolean mBackTransitioning;
         private boolean mHomeAppearing;
@@ -894,6 +901,18 @@ public class NavigationBarView extends FrameLayout implements PluginListener<Nav
         return null;
     }
 
+    public void shiftNavigationBarItems(int horizontalShift, int verticalShift) {
+        if (mNavigationBarContents == null) {
+            return;
+        }
+
+        mNavigationBarContents.setPaddingRelative(mBasePaddingLeft + horizontalShift,
+                                              mBasePaddingTop + verticalShift,
+                                              mBasePaddingRight + horizontalShift,
+                                              mBasePaddingBottom - verticalShift);
+        invalidate();
+    }
+
     @Override
     public void onFinishInflate() {
         mNavigationInflaterView = findViewById(R.id.navigation_inflater);
@@ -901,6 +920,13 @@ public class NavigationBarView extends FrameLayout implements PluginListener<Nav
 
         getImeSwitchButton().setOnClickListener(mImeSwitcherClickListener);
 
+        mNavigationBarContents = (ViewGroup) findViewById(R.id.nav_buttons);
+
+        mBasePaddingLeft = mNavigationBarContents.getPaddingStart();
+        mBasePaddingTop = mNavigationBarContents.getPaddingTop();
+        mBasePaddingRight = mNavigationBarContents.getPaddingEnd();
+        mBasePaddingBottom = mNavigationBarContents.getPaddingBottom();
+
         DockedStackExistsListener.register(mDockedListener);
         updateRotatedViews();
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
index 59863ecb119..47aa39f2b3c 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
@@ -23,6 +23,7 @@ import static com.android.systemui.ScreenDecorations.DisplayCutoutView.boundsFro
 import android.annotation.Nullable;
 import android.content.Context;
 import android.content.res.Configuration;
+import android.content.res.Resources;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.util.AttributeSet;
@@ -53,6 +54,13 @@ public class PhoneStatusBarView extends PanelBar {
     private static final boolean DEBUG_GESTURES = false;
     private static final int NO_VALUE = Integer.MIN_VALUE;
 
+    private int mBasePaddingBottom;
+    private int mBasePaddingLeft;
+    private int mBasePaddingRight;
+    private int mBasePaddingTop;
+
+    private ViewGroup mStatusBarContents;
+
     StatusBar mBar;
 
     boolean mIsFullyOpenedPanel = false;
@@ -96,6 +104,18 @@ public class PhoneStatusBarView extends PanelBar {
         mScrimController = scrimController;
     }
 
+    public void shiftStatusBarItems(int horizontalShift, int verticalShift) {
+        if (mStatusBarContents == null) {
+            return;
+        }
+
+        mStatusBarContents.setPaddingRelative(mBasePaddingLeft + horizontalShift,
+                                              mBasePaddingTop + verticalShift,
+                                              mBasePaddingRight + horizontalShift,
+                                              mBasePaddingBottom - verticalShift);
+        invalidate();
+    }
+
     @Override
     public void onFinishInflate() {
         mBarTransitions.init();
@@ -103,6 +123,13 @@ public class PhoneStatusBarView extends PanelBar {
         mCutoutSpace = findViewById(R.id.cutout_space_view);
 
         updateResources();
+
+        mStatusBarContents = (ViewGroup) findViewById(R.id.status_bar_contents);
+
+        mBasePaddingLeft = mStatusBarContents.getPaddingStart();
+        mBasePaddingTop = mStatusBarContents.getPaddingTop();
+        mBasePaddingRight = mStatusBarContents.getPaddingEnd();
+        mBasePaddingBottom = mStatusBarContents.getPaddingBottom();
     }
 
     @Override
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
index 78634656d86..120acf119be 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
@@ -221,6 +221,7 @@ import com.android.systemui.statusbar.phone.UnlockMethodCache.OnUnlockMethodChan
 import com.android.systemui.statusbar.policy.BatteryController;
 import com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback;
 import com.android.systemui.statusbar.policy.BrightnessMirrorController;
+import com.android.systemui.statusbar.policy.BurnInProtectionController;
 import com.android.systemui.statusbar.policy.ConfigurationController;
 import com.android.systemui.statusbar.policy.ConfigurationController.ConfigurationListener;
 import com.android.systemui.statusbar.policy.DarkIconDispatcher;
@@ -369,6 +370,8 @@ public class StatusBar extends SystemUI implements DemoMode,
     private LightBarController mLightBarController;
     protected LockscreenWallpaper mLockscreenWallpaper;
 
+    private BurnInProtectionController mBurnInProtectionController;
+
     private int mNaturalBarHeight = -1;
 
     private final Point mCurrentDisplaySize = new Point();
@@ -863,6 +866,8 @@ public class StatusBar extends SystemUI implements DemoMode,
                     mStatusBarWindow.setStatusBarView(mStatusBarView);
                     setAreThereNotifications();
                     checkBarModes();
+                    mBurnInProtectionController =
+                        new BurnInProtectionController(mContext, this, mStatusBarView);
                 }).getFragmentManager()
                 .beginTransaction()
                 .replace(R.id.status_bar_container, new CollapsedStatusBarFragment(),
@@ -4511,6 +4516,9 @@ public class StatusBar extends SystemUI implements DemoMode,
             // Keyguard.
             mNotificationPanel.setTouchDisabled(true);
             mStatusBarWindow.cancelCurrentTouch();
+            if (mBurnInProtectionController != null) {
+                mBurnInProtectionController.stopShiftTimer();
+            }
             if (mLaunchCameraOnFinishedGoingToSleep) {
                 mLaunchCameraOnFinishedGoingToSleep = false;
 
@@ -4537,6 +4545,9 @@ public class StatusBar extends SystemUI implements DemoMode,
             updateVisibleToUser();
             updateIsKeyguard();
             updateScrimController();
+            if (mBurnInProtectionController != null) {
+                mBurnInProtectionController.startShiftTimer();
+            }
         }
     };
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/BurnInProtectionController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/BurnInProtectionController.java
new file mode 100644
index 00000000000..a2fd65fbac9
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/BurnInProtectionController.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright 2017-2018 Paranoid Android
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.policy;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.os.Handler;
+import android.os.Looper;
+import android.util.Log;
+import android.view.View;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.phone.PhoneStatusBarView;
+import com.android.systemui.statusbar.phone.NavigationBarView;
+import com.android.systemui.statusbar.phone.StatusBar;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class BurnInProtectionController {
+
+    private static final String TAG = BurnInProtectionController.class.getSimpleName();
+    private static final boolean DEBUG = false;
+
+    private boolean mShiftEnabled;
+    private int mHorizontalShift = 0;
+    private int mVerticalShift = 0;
+    private int mHorizontalDirection = 1;
+    private int mVerticalDirection = 1;
+    private int mNavigationBarHorizontalMaxShift;
+    private int mNavigationBarVerticalMaxShift;
+    private int mHorizontalMaxShift;
+    private int mVerticalMaxShift;
+    private long mShiftInterval;
+
+    private Timer mTimer;
+
+    private StatusBar mStatusBar;
+    private PhoneStatusBarView mPhoneStatusBarView;
+
+    private Context mContext;
+
+    public BurnInProtectionController(Context context, StatusBar statusBar,
+                                      PhoneStatusBarView phoneStatusBarView) {
+        mContext = context;
+
+        mStatusBar = statusBar;
+
+        mPhoneStatusBarView = phoneStatusBarView;
+
+        mShiftEnabled = mContext.getResources().getBoolean(
+                R.bool.config_statusBarBurnInProtection);
+        mHorizontalMaxShift = mContext.getResources()
+                .getDimensionPixelSize(R.dimen.horizontal_max_shift);
+        // total of ((vertical_max_shift - 1) * 2) pixels can be moved
+        mVerticalMaxShift = mContext.getResources()
+                .getDimensionPixelSize(R.dimen.vertical_max_shift) - 1;
+        mShiftInterval = (long) mContext.getResources().getInteger(R.integer.config_shift_interval);
+    }
+
+    public void startShiftTimer() {
+        if (!mShiftEnabled) return;
+        if (mTimer == null) {
+            mTimer = new Timer();
+        }
+        mTimer.schedule(new TimerTask() {
+            @Override
+            public void run() {
+                final Handler mUiHandler = new Handler(Looper.getMainLooper());
+                mUiHandler.post(() -> {
+                    shiftItems();
+                });
+            }
+        }, 0, mShiftInterval * 1000);
+        if (DEBUG) Log.d(TAG, "Started shift timer");
+    }
+
+    public void stopShiftTimer() {
+        if (!mShiftEnabled) return;
+        mTimer.cancel();
+        mTimer.purge();
+        mTimer = null;
+        if (DEBUG) Log.d(TAG, "Canceled shift timer");
+    }
+
+    private void shiftItems() {
+        mHorizontalShift += mHorizontalDirection;
+        if ((mHorizontalShift >=  mHorizontalMaxShift) ||
+                (mHorizontalShift <= -mHorizontalMaxShift)) {
+            mHorizontalDirection *= -1;
+        }
+
+        mVerticalShift += mVerticalDirection;
+        if ((mVerticalShift >=  mVerticalMaxShift) ||
+                (mVerticalShift <= -mVerticalMaxShift)) {
+            mVerticalDirection *= -1;
+        }
+
+        mPhoneStatusBarView.shiftStatusBarItems(mHorizontalShift, mVerticalShift);
+        NavigationBarView mNavigationBarView = mStatusBar.getNavigationBarView();
+        if (mNavigationBarView != null) {
+            mNavigationBarView.shiftNavigationBarItems(mHorizontalShift, mVerticalShift);
+        }
+
+        if (DEBUG) Log.d(TAG, "Shifting items..");
+    }
+}
-- 
2.15.1

